// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// schema.prisma

// User Model
model User {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  visibility Visibility? @default(VISIBLE)

  firstname   String
  lastname    String
  titleAfter  String?
  titleBefore String?
  email       String    @unique
  phone       String?
  birthdate   DateTime
  sex         Sex
  image       Bytes?
  role        UserRoles @default(STUDENT)
  password    String
  year        Int?

  fieldOfStudyId String?
  fieldOfStudy   FieldOfStudy? @relation(fields: [fieldOfStudyId], references: [id])

  exams Exam[]

  guarantorSubject Subject? @relation("guator_subject")

  ratings Rating[]

  teacherSubjects Subject[] @relation("teachers")

  @@map("users")
}

enum UserRoles {
  STUDENT @map("STUDENT")
  TEACHER @map("TEACHER")
  ADMIN   @map("ADMIN")
}

enum Sex {
  MALE   @map("MALE")
  FEMALE @map("FEMALE")
  OTHER  @map("OTHER")
}

enum Visibility {
  HIDDEN  @map("HIDDEN")
  VISIBLE @map("VISIBLE")
}

model FieldOfStudy {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  visibility Visibility? @default(VISIBLE)

  name        String
  description String?

  duration Int

  type FieldOfStudyTypes

  subjects Subject[] @relation("fieldOfStudiesSubjects")

  students User[]

  @@map("fields_of_study")
}

enum FieldOfStudyTypes {
  BACHELOR @map("BACHELOR")
  MAGISTER @map("MAGISTER")
  DOCTORAL @map("DOCTORAL")
}

// AuthToken Model
model AuthToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  token String @unique

  expiresAt DateTime

  @@map("auth_tokens")
}

// Activity Model
model Activity {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  visibility Visibility? @default(VISIBLE)

  name        String
  description String?

  @@map("activities")
}

// Subject Model
model Subject {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  visibility Visibility? @default(VISIBLE)

  name       String
  shortName  String
  department String
  credits    Int

  guarantorId String @unique
  guarantor   User   @relation("guator_subject", fields: [guarantorId], references: [id])

  teachers User[] @relation("teachers")

  fieldOfStudies FieldOfStudy[] @relation("fieldOfStudiesSubjects")

  description String?
  category    String
  exams       Exam[]
  schedules   Schedule[]

  @@map("subjects")
}

// Exam Model
model Exam {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  visibility Visibility? @default(VISIBLE)

  name  String
  type  ExamTypes
  start DateTime
  end   DateTime
  score Int?

  teacherId String
  teacher   User   @relation(fields: [teacherId], references: [id])

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  capacity Int

  roomId      String?
  room        Room?    @relation(fields: [roomId], references: [id])
  description String?
  ratings     Rating[]

  @@map("exams")
}

enum ExamTypes {
  EXAM         @map("EXAM")
  PRESENTATION @map("PRESENTATION")
  PROJECT      @map("PROJECT")
}

model Room {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  visibility Visibility? @default(VISIBLE)

  name        String
  floor       Int
  type        RoomTypes
  description String?
  capacity    Int
  exam        Exam[]
  schedules   Schedule[]

  @@map("rooms")
}

enum RoomTypes {
  COMPUTERS  @map("COMPUTERS")
  LABORATORY @map("LABORATORY")
  LECTURE    @map("LECTURE")
  SEMINAR    @map("SEMINAR")
  OFFICE     @map("OFFICE")
  OTHER      @map("OTHER")
}

// Rating Model
model Rating {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  visibility Visibility? @default(VISIBLE)

  date DateTime @default(now())

  studentId String
  student   User   @relation(fields: [studentId], references: [id])

  examId String
  exam   Exam   @relation(fields: [examId], references: [id])

  rating Int

  @@map("ratings")
}

// Student Schedule Model
model Schedule {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  visibility Visibility? @default(VISIBLE)

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  roomId String?
  room   Room?   @relation(fields: [roomId], references: [id])

  startTime DateTime?
  endTime   DateTime?

  @@map("student_schedules")
}
